<?php

namespace App\Services;

use App\Models\User;
use App\Repositories\StepRepository;
use App\Repositories\UserRepository;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Http;

class StepService
{
    public function __construct(
        private readonly StepRepository $stepRepository,
        private readonly UserRepository $userRepository,
    )
    {}

    public function handle($message)
    {
        $chatId = $message['chat']['id'];
        $text = $message['text'] ?? '';
        $caption = $message['caption'] ?? 'no';
        $userName = $message['from']['first_name'] ?? ($message['from']['username'] ?? 'Unknown');
        $userLogin = $message['from']['username'] ?? null;
        $userId = $message['from']['id'] ?? '';

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞ - –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
        if (strlen($text) < 2 && strlen($caption) > 1) {
            $text = $caption;
        }

        if (empty($text)) {
            $this->error();
        }

        if (strpos($text, '#—à–∞–≥–∏') !== false) {

            // –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏—Å–ª–∞—Ç—å –æ—Ç—á–µ—Ç –≤ –ª–∏—á–∫—É –±–æ—Ç–∞
            if ($chatId > 0) {
                $this->sendMessage($chatId, "–ü—Ä–∏–≤–µ—Ç, $userName! –•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞ ;) –û—Ç—á–µ—Ç—ã –º–æ–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ø—É–±–ª–∏—á–Ω—ã–π —á–∞—Ç");
                die;
            }

            $textArr = explode(' ', $text);

            if (isset($textArr[1]) && is_numeric($textArr[1])) {
                $steps = $textArr[1];

                try {

                    $user = $this->userRepository->updateOrCreate($userId, $userLogin, $userName);

                } catch (\Exception $e) {
                    file_put_contents('errors.txt', $e->getMessage() . "\n" . $userName . "\n" . $userId);
                }

                $this->stepRepository->write($userId, $steps, $chatId);

                $total = $this->stepRepository->getTotalStepsByUserId($userId, $chatId);

                $additionalText = '';

                if ($steps < 6000) {
                    $additionalText = '–£ —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è —á–∏–ª–ª-–¥–µ–Ω—å? ';
                }

                if ($steps > 15000) {
                    $additionalText = '–û–≥–æ! –ö–∞–∫ –º–Ω–æ–≥–æ —à–∞–≥–æ–≤. ';
                }

                if ($steps > 30000) {
                    $additionalText = '–û–≥–æ! –¢—ã —Å–µ–≥–æ–¥–Ω—è —Ä–µ–∫–æ—Ä–¥—Å–º–µ–Ω! üèÜ';
                }

                if ($user->sex == '1') {
                    $this->sendMessage($chatId, "–ü—Ä–∏–≤–µ—Ç, $userName! $additionalText –û—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Ç. –¢—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—à–µ–ª $steps —à–∞–≥–æ–≤. –ê –≤—Å–µ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–∞—Ö–æ–¥–∏–ª $total —à–∞–≥–æ–≤");
                } elseif ($user->sex == '2') {
                    $this->sendMessage($chatId, "–ü—Ä–∏–≤–µ—Ç, $userName! $additionalText –û—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Ç. –¢—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—à–ª–∞ $steps —à–∞–≥–æ–≤. –ê –≤—Å–µ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–∞—Ö–æ–¥–∏–ª–∞ $total —à–∞–≥–æ–≤");
                } else {
                    $this->sendMessage($chatId, "–ü—Ä–∏–≤–µ—Ç, $userName! $additionalText –û—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Ç. –¢—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—à–µ–ª(-—à–ª–∞) $steps —à–∞–≥–æ–≤. –ê –≤—Å–µ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–∞—Ö–æ–¥–∏–ª(-–ª–∞) $total —à–∞–≥–æ–≤");
                }
            } else {
                $this->sendMessage($chatId, "–ü—Ä–∏–≤–µ—Ç, $userName! –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç—á–µ—Ç. –ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —Ñ–æ—Ä–º–∞—Ç–µ #—à–∞–≥–∏ <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>");
            }
        }

        if (strpos($text, '#—Ä–µ–π—Ç–∏–Ω–≥') !== false) {

            $sql = "
                    SELECT
                        users.user_name,
                        (SELECT SUM(steps.count) FROM steps WHERE steps.user_id = users.user_id AND steps.chat_id = " . $chatId . ") AS total_count,
                        (SELECT COUNT(*) FROM steps WHERE steps.user_id = users.user_id AND steps.chat_id = " . $chatId . ") AS records_count
                    FROM users
                    HAVING total_count > 0
                    ORDER BY total_count DESC
                ";

            $results = DB::select($sql);

            $sql = "SELECT sum(count) as count FROM steps WHERE steps.chat_id = " . $chatId;
            $sum = DB::select($sql);

            $sum = number_format($sum[0]->count, 0, '', ' ');
            $data = '–í—Å–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–æ —à–∞–≥–æ–≤: ' . $sum . PHP_EOL . PHP_EOL;

            foreach ($results as $result) {

                //$result->total_count = number_format($result->total_count, 0, '', ' ');
                $data .= $result->user_name . ": <b>" . $result->total_count . "</b> (<i>" . $result->records_count . " –æ—Ç—á–µ—Ç–æ–≤</i>)" . PHP_EOL;
            }

            $this->sendMessage($chatId, $data);
        }

        if (strpos($text, '#–æ—Ç–º–µ–Ω–∏—Ç—å') !== false) {


            try {
                $lastItem = $this->stepRepository->getLastReport($chatId, $userId);

                $this->stepRepository->deleteLastReport($chatId, $userId);

                $this->sendMessage($chatId, "$userName, —Ç–≤–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç –Ω–∞ $lastItem —à–∞–≥–æ–≤ —É–¥–∞–ª–µ–Ω");

            } catch (\Exception $e) {
                $this->sendMessage($chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ " . $e->getMessage());

            }
        }

        if (strpos($text, '#–∑–∞–±—ã–≤–∞—à–∫–∏') !== false) {
            die;
            $day = date('d');

            $sql = "SELECT DISTINCT s.user_id, u.user_name
                FROM steps s
                INNER JOIN users u ON u.user_id = s.user_id
                WHERE NOT EXISTS (
                    SELECT 1
                    FROM steps s2
                    WHERE s2.user_id = s.user_id
                      AND DAY(s2.created_at) = ' . $day . ')
                ";

            $items = DB::select($sql);

            $data = '–°–µ–≥–æ–¥–Ω—è —Å–≤–æ–∏ –æ—Ç—á–µ—Ç—ã –Ω–∞–º –∑–∞–±—ã–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å: ' . PHP_EOL;
            foreach ($items as $item) {
                $data .= $item->user_name . PHP_EOL;
            }

            $this->sendMessage($chatId, $data);
        }

        if (strpos($text, '#—Ä–µ—Å—Ç–∞—Ä—Ç') !== false) {

            if ($userId !== '349614044' || $userId !== '1775159750') {
                $this->sendMessage($chatId, "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã");
                die;
            }

            try {
                $this->stepRepository->deleteAll($chatId);
            } catch (\Exception $e) {
                $this->sendMessage($chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ " . $e->getMessage());
                die;
            }

            $this->sendMessage($chatId, "–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –†–µ–π—Ç–∏–Ω–≥ –æ–±–Ω—É–ª–µ–Ω");
        }
    }

    protected function sendMessage($chatId, $message): bool
    {
        $botToken = env('TELEGRAM_TOKEN');
        $botApiUrl = "https://api.telegram.org/bot{$botToken}/sendMessage";

        Http::post($botApiUrl, [
            'chat_id' => $chatId,
            'text' => $message,
            'parse_mode' => 'HTML'
        ]);

        return true;
    }

    public function error(): void
    {
        http_response_code(200);
        echo 'OK';
        exit;
    }
}
